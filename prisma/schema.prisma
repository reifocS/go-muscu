generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exercices Exercise[]
  password  Password?
  workouts  Workout[]
  tags      Tag[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id     String @id @default(cuid())
  title  String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  set    Set[]
}

model Workout {
  id       String   @id @default(cuid())
  date     DateTime
  userId   String
  duration Float?
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  set      Set[]
  tag      Tag?     @relation(fields: [tagId], references: [id])
  tagId    String?
}

model Set {
  id         String   @id @default(cuid())
  exerciseId String
  workoutId  String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  series     Series[]
  note       String?
}

model Series {
  id          String @id @default(cuid())
  repetitions Int
  weigth      Float
  setId       String
  set         Set    @relation(fields: [setId], references: [id], onDelete: Cascade)
}

model Tag {
  id       String    @id @default(cuid())
  label    String
  workouts Workout[]
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
